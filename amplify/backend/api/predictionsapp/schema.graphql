type Round @model
    @auth(rules: [
        { allow: public, operations: [read] },
        { allow: private, operations: [read] },
        { allow: groups, groups:["admin"], operations: [create, update, delete, read] }
    ])
    @key(name: "byStatus", fields: ["status", "kickOff"], queryField: "roundByStatus")
{
    id: ID!
    number: Int
    homeTeam: Team! @connection
    awayTeam: Team! @connection
    kickOff: AWSDateTime!
    ground: String
    status: RoundStatus!
}

enum RoundStatus {
    pending
    active
    closed
    complete
}

type Team @model
    @auth(rules: [
        { allow: public, operations: [read] },
        { allow: private, operations: [read] },
        { allow: groups, groups:["admin"], operations: [create, update, delete, read] }
    ])
{
    id: ID!
    name: String!
    badgeSrc: String
    ground: String
}

type Prediction @model
    @auth(rules: [
        { allow: owner },
        { allow: private, provider: iam, operations: [read, update] }
    ])
    @key(name: "byRound", fields: ["roundId"], queryField: "predictionsByRound")
{
    id: ID!
    roundId: ID!
    homeScore: Int!
    awayScore: Int!
    points: Int
}

type Result @model
    @auth(rules: [
        { allow: private, operations: [read] },
        { allow: groups, groups:["admin"], operations: [create, update, delete, read] }
    ])
{
    id: ID!
    roundId: ID!
    round: Round! @connection(fields:["roundId"])
    homeScore: Int!
    awayScore: Int!
}

type RoundLeaderboard @model
    @auth(rules: [
        { allow: private, operations: [read] }
        { allow: private, provider: iam, operations: [read, create, update, delete] }
    ])
    @key(name: "byRoundPoints", fields: [ "roundId", "points" ], queryField: "roundLeaderboardByPoints")
{
    id: ID!
    roundId: ID!
    username: String!
    points: Int!
}

type SeasonLeaderboard @model
    @auth(rules: [
        { allow: private, operations: [read] }
        { allow: private, provider: iam, operations: [read, create, update] }
    ])
    @key(name: "bySeasonPoints", fields: [ "season", "points" ], queryField: "seasonLeaderboardByPoints")
{
    id: ID!
    season: Int!
    username: String!
    points: Int!
}