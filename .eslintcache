[{"/Users/phil/rocSOLID/code/predictor/src/layout/Layout.js":"1","/Users/phil/rocSOLID/code/predictor/src/pages/Home.js":"2","/Users/phil/rocSOLID/code/predictor/src/App.js":"3","/Users/phil/rocSOLID/code/predictor/src/components/Fixture.js":"4","/Users/phil/rocSOLID/code/predictor/src/layout/Header.js":"5","/Users/phil/rocSOLID/code/predictor/src/components/TeamCard.js":"6","/Users/phil/rocSOLID/code/predictor/src/components/HowToCard.js":"7","/Users/phil/rocSOLID/code/predictor/src/pages/Profile.js":"8","/Users/phil/rocSOLID/code/predictor/src/layout/UserMenu.js":"9","/Users/phil/rocSOLID/code/predictor/src/pages/Play.js":"10","/Users/phil/rocSOLID/code/predictor/src/components/ScoreCard.js":"11","/Users/phil/rocSOLID/code/predictor/src/components/ScoreField.js":"12","/Users/phil/rocSOLID/code/predictor/src/aws-exports.js":"13","/Users/phil/rocSOLID/code/predictor/src/graphql/queries.js":"14","/Users/phil/rocSOLID/code/predictor/src/reportWebVitals.js":"15","/Users/phil/rocSOLID/code/predictor/src/pages/Leaderboard.js":"16","/Users/phil/rocSOLID/code/predictor/src/pages/Results.js":"17","/Users/phil/rocSOLID/code/predictor/src/index.js":"18","/Users/phil/rocSOLID/code/predictor/src/pages/HowTo.js":"19","/Users/phil/rocSOLID/code/predictor/src/hooks/useRound.js":"20","/Users/phil/rocSOLID/code/predictor/src/hooks/useUser.js":"21","/Users/phil/rocSOLID/code/predictor/src/pages/Pages.js":"22","/Users/phil/rocSOLID/code/predictor/src/pages/SignIn.js":"23","/Users/phil/rocSOLID/code/predictor/src/graphql/mutations.js":"24","/Users/phil/rocSOLID/code/predictor/src/components/StaticScoreField.js":"25","/Users/phil/rocSOLID/code/predictor/src/layout/Footer.js":"26","/Users/phil/rocSOLID/code/predictor/src/components/ProgressStepper.js":"27","/Users/phil/rocSOLID/code/predictor/src/components/PointsTable.js":"28","/Users/phil/rocSOLID/code/predictor/src/graphql/subscriptions.js":"29","/Users/phil/rocSOLID/code/predictor/src/Queries.js":"30","/Users/phil/rocSOLID/code/predictor/src/components/PointsBreakdown.js":"31","/Users/phil/rocSOLID/code/predictor/src/pages/TsAndCs.js":"32","/Users/phil/rocSOLID/code/predictor/src/pages/About.js":"33","/Users/phil/rocSOLID/code/predictor/src/pages/Privacy.js":"34","/Users/phil/rocSOLID/code/predictor/src/components/TitledContent.js":"35","/Users/phil/rocSOLID/code/predictor/src/pages/Score.js":"36","/Users/phil/rocSOLID/code/predictor/src/components/ConfirmDialog.js":"37","/Users/phil/rocSOLID/code/predictor/src/pages/Fixtures.js":"38","/Users/phil/rocSOLID/code/predictor/src/hooks/useAdminUser.js":"39","/Users/phil/rocSOLID/code/predictor/src/components/Authenticator.js":"40","/Users/phil/rocSOLID/code/predictor/src/components/Naughty.js":"41"},{"size":673,"mtime":1616149046387,"results":"42","hashOfConfig":"43"},{"size":7817,"mtime":1616011172473,"results":"44","hashOfConfig":"43"},{"size":843,"mtime":1616149032827,"results":"45","hashOfConfig":"43"},{"size":1936,"mtime":1615307130462,"results":"46","hashOfConfig":"43"},{"size":6008,"mtime":1615308182376,"results":"47","hashOfConfig":"43"},{"size":923,"mtime":1615203445526,"results":"48","hashOfConfig":"43"},{"size":1538,"mtime":1613982663972,"results":"49","hashOfConfig":"43"},{"size":6604,"mtime":1624552127158,"results":"50","hashOfConfig":"43"},{"size":2505,"mtime":1615223196174,"results":"51","hashOfConfig":"43"},{"size":6043,"mtime":1616151161737,"results":"52","hashOfConfig":"43"},{"size":1480,"mtime":1613218353003,"results":"53","hashOfConfig":"43"},{"size":1088,"mtime":1613218750834,"results":"54","hashOfConfig":"43"},{"size":752,"mtime":1624645847448,"results":"55","hashOfConfig":"43"},{"size":7972,"mtime":1624550008753,"results":"56","hashOfConfig":"43"},{"size":362,"mtime":1609498744062,"results":"57","hashOfConfig":"43"},{"size":7391,"mtime":1616151161730,"results":"58","hashOfConfig":"43"},{"size":9343,"mtime":1616151161723,"results":"59","hashOfConfig":"43"},{"size":599,"mtime":1609509408186,"results":"60","hashOfConfig":"43"},{"size":6682,"mtime":1614809168929,"results":"61","hashOfConfig":"43"},{"size":1991,"mtime":1617035298631,"results":"62","hashOfConfig":"43"},{"size":684,"mtime":1616149075030,"results":"63","hashOfConfig":"43"},{"size":2320,"mtime":1616012181868,"results":"64","hashOfConfig":"43"},{"size":669,"mtime":1616150842547,"results":"65","hashOfConfig":"43"},{"size":8800,"mtime":1624550008900,"results":"66","hashOfConfig":"43"},{"size":709,"mtime":1613218750899,"results":"67","hashOfConfig":"43"},{"size":2527,"mtime":1615553705507,"results":"68","hashOfConfig":"43"},{"size":1076,"mtime":1613597418516,"results":"69","hashOfConfig":"43"},{"size":2419,"mtime":1614187932281,"results":"70","hashOfConfig":"43"},{"size":6604,"mtime":1624550009028,"results":"71","hashOfConfig":"43"},{"size":2366,"mtime":1624549535167,"results":"72","hashOfConfig":"43"},{"size":2965,"mtime":1614595795915,"results":"73","hashOfConfig":"43"},{"size":4868,"mtime":1617024096702,"results":"74","hashOfConfig":"43"},{"size":1683,"mtime":1615495908382,"results":"75","hashOfConfig":"43"},{"size":2554,"mtime":1615990008260,"results":"76","hashOfConfig":"43"},{"size":1059,"mtime":1615216318729,"results":"77","hashOfConfig":"43"},{"size":8567,"mtime":1616245764466,"results":"78","hashOfConfig":"43"},{"size":1811,"mtime":1614859635684,"results":"79","hashOfConfig":"43"},{"size":13089,"mtime":1616245764461,"results":"80","hashOfConfig":"43"},{"size":542,"mtime":1614813112717,"results":"81","hashOfConfig":"43"},{"size":2942,"mtime":1616171054918,"results":"82","hashOfConfig":"43"},{"size":655,"mtime":1616245850074,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"14jjqs3",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"86"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"/Users/phil/rocSOLID/code/predictor/src/layout/Layout.js",[],["174","175"],"/Users/phil/rocSOLID/code/predictor/src/pages/Home.js",[],"/Users/phil/rocSOLID/code/predictor/src/App.js",[],"/Users/phil/rocSOLID/code/predictor/src/components/Fixture.js",[],"/Users/phil/rocSOLID/code/predictor/src/layout/Header.js",[],"/Users/phil/rocSOLID/code/predictor/src/components/TeamCard.js",[],"/Users/phil/rocSOLID/code/predictor/src/components/HowToCard.js",[],"/Users/phil/rocSOLID/code/predictor/src/pages/Profile.js",["176"],"/Users/phil/rocSOLID/code/predictor/src/layout/UserMenu.js",[],"/Users/phil/rocSOLID/code/predictor/src/pages/Play.js",["177"],"import React, {useEffect, useState} from 'react';\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\nimport Fixture from \"../components/Fixture\";\nimport ScoreCard from \"../components/ScoreCard\";\nimport {useRound} from \"../hooks/useRound\";\nimport Box from '@material-ui/core/Box';\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport API from \"@aws-amplify/api\";\nimport {predictionsByRound} from \"../graphql/queries\";\nimport * as mutations from \"../graphql/mutations\";\nimport {useUser} from \"../hooks/useUser\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport Authenticator from \"../components/Authenticator\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: 800,\n        margin: \"auto\",\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(5),\n    },\n    title: {\n        fontWeight: \"bolder\",\n        margin: \"auto\",\n        padding: theme.spacing(2),\n        maxWidth: 500,\n    },\n    noRound: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: 400,\n    },\n}));\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" direction=\"up\" {...props} />;\n}\n\nexport default function Play() {\n    const classes = useStyles();\n    const theme = useTheme();\n    const user = useUser();\n    const round = useRound();\n\n    const [predictionId, setPredictionId] = useState(0);\n    const [homeScore, setHomeScore] = useState(0);\n    const [awayScore, setAwayScore] = useState(0);\n\n    const [openSnackBar, setOpenSnackBar] = useState(false);\n\n    const [roundReady, setRoundReady] = useState();\n\n    useEffect(() => {\n        if (round) {\n            setRoundReady(true);\n        } else {\n            setRoundReady(false);\n        }\n    }, [round]);\n\n    useEffect(() => {\n        if (!user) {\n            setPredictionId(0);\n        }\n        fetchPrediction();\n    }, [user, round]);\n\n    async function fetchPrediction() {\n        if (user && round) {\n            const pred = await API.graphql({\n                query: predictionsByRound,\n                variables: {roundId: round.id},\n                authMode: 'AMAZON_COGNITO_USER_POOLS'\n            });\n            if (pred.data.predictionsByRound.items.length < 1) {\n                setPredictionId(0);\n                setHomeScore(0);\n                setAwayScore(0);\n            } else {\n                setPredictionId(pred.data.predictionsByRound.items[0].id);\n                setHomeScore(pred.data.predictionsByRound.items[0].homeScore);\n                setAwayScore(pred.data.predictionsByRound.items[0].awayScore);\n            }\n        }\n    }\n\n    const handleSubmit = (event) => {\n        savePrediction();\n        setOpenSnackBar(true);\n        event.preventDefault();\n    }\n\n    async function savePrediction() {\n        if (predictionId) {\n            await API.graphql({\n                query: mutations.updatePrediction,\n                variables: {input: {id: predictionId, homeScore: homeScore, awayScore: awayScore}},\n                authMode: 'AMAZON_COGNITO_USER_POOLS'\n            });\n        } else {\n            const pred = await API.graphql({\n                query: mutations.createPrediction,\n                variables: {input: {roundId: round.id, homeScore: homeScore, awayScore: awayScore}},\n                authMode: 'AMAZON_COGNITO_USER_POOLS'\n            });\n            setPredictionId(pred.data.createPrediction.id);\n        }\n    }\n\n    const handleHomeScoreChange = (event) => {\n        const value = event.target.value;\n        setHomeScore(!value ? \"0\" : value);\n    };\n\n    const handleAwayScoreChange = (event) => {\n        const value = event.target.value;\n        setAwayScore(!value ? \"0\" : value);\n    };\n\n    const handleSnackBarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpenSnackBar(false);\n    };\n\n    return (\n        <Authenticator>\n            <Box className={classes.root}>\n                {roundReady && <div>\n                    {round.id === 0 ?\n                        <div className={classes.noRound}><Typography className={classes.title} variant={\"h2\"} color={\"primary\"}>NEXT ROUND COMING SOON</Typography></div>\n                        : <div>\n                            <Typography className={classes.title} variant={\"h2\"} color={\"primary\"}>Round {round.number}</Typography>\n                            {round.status === \"active\" &&\n                            <Typography style={{textAlign: \"left\", margin: theme.spacing(1)}} gutterBottom variant=\"h5\" color={\"primary\"}>Enter your\n                                prediction</Typography>}\n                            <Fixture round={round}/>\n                            <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n                                <ScoreCard isActive={round.status === \"active\"} id={\"play\"} homeScore={homeScore}\n                                           onHomeScoreChange={handleHomeScoreChange}\n                                           awayScore={awayScore} onAwayScoreChange={handleAwayScoreChange}/>\n                                {round.status === \"active\" &&\n                                <Button style={{marginTop: theme.spacing(5)}} fullWidth={true} variant=\"contained\" type={\"submit\"}\n                                        color=\"primary\">Save</Button>\n                                }\n                                <Snackbar open={openSnackBar} autoHideDuration={3000} onClose={handleSnackBarClose}>\n                                    <Alert onClose={handleSnackBarClose} severity=\"success\">\n                                        Prediction successfully saved!\n                                    </Alert>\n                                </Snackbar>\n                            </form>\n                        </div>}\n                </div>}\n            </Box>\n        </Authenticator>\n    );\n}","/Users/phil/rocSOLID/code/predictor/src/components/ScoreCard.js",[],"/Users/phil/rocSOLID/code/predictor/src/components/ScoreField.js",[],"/Users/phil/rocSOLID/code/predictor/src/aws-exports.js",[],"/Users/phil/rocSOLID/code/predictor/src/graphql/queries.js",[],"/Users/phil/rocSOLID/code/predictor/src/reportWebVitals.js",[],"/Users/phil/rocSOLID/code/predictor/src/pages/Leaderboard.js",["178","179","180"],"import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport {fetchCompleteRoundsQuery, fetchRoundLeaderBoardByPointsQuery, fetchSeasonLeaderBoardByPointsQuery} from \"../Queries\";\nimport API, {graphqlOperation} from \"@aws-amplify/api\";\nimport PointsTable from \"../components/PointsTable\";\nimport ProgressStepper from \"../components/ProgressStepper\";\nimport StaticScoreField from \"../components/StaticScoreField\";\nimport {useUser} from \"../hooks/useUser\";\nimport Authenticator from \"../components/Authenticator\";\n\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`full-width-tabpanel-${index}`}\n            aria-labelledby={`full-width-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Box>{children}</Box>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `full-width-tab-${index}`,\n        'aria-controls': `full-width-tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: 800,\n        margin: \"auto\",\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(5),\n    },\n    title: {\n        fontWeight: \"bolder\",\n        margin: \"auto\",\n        padding: theme.spacing(2),\n        maxWidth: 500,\n    },\n    tab: {\n        backgroundColor: theme.palette.background.paper,\n        maxWidth: 500,\n        margin: \"auto\",\n    },\n}));\n\nexport default function LeaderBoard() {\n    const classes = useStyles();\n    const theme = useTheme();\n    const user = useUser();\n\n    const [tabValue, setTabValue] = useState(0);\n\n    const [activeRound, setActiveRound] = useState(0);\n    const [maxRounds, setMaxRounds] = useState(0);\n    const [seasonPoints, setSeasonPoints] = useState(0);\n    const [roundPoints, setRoundPoints] = useState(0);\n\n    const [rounds, setRounds] = useState();\n    const [seasonRankings, setSeasonRankings] = useState([]);\n    const [roundRankings, setRoundRankings] = useState();\n\n    useEffect(() => {\n        setTabValue(1);\n        fetchSeasonLeaderboard();\n        fetchCompleteRounds();\n    }, [user]);\n\n    useEffect(() => {\n        if (rounds) {\n            fetchRoundLeaderboard(rounds.length - 1);\n        }\n    }, [rounds])\n\n    useEffect(() => {\n        fetchRoundLeaderboard(activeRound);\n    }, [activeRound])\n\n    async function fetchCompleteRounds() {\n        if (user) {\n            const result = await API.graphql(graphqlOperation(fetchCompleteRoundsQuery));\n            const rounds = result.data.roundByStatus.items;\n            if (rounds.length > 0) {\n                setRounds(rounds);\n                setMaxRounds(rounds.length);\n                setActiveRound(rounds.length - 1);\n            }\n        }\n    }\n\n    async function fetchSeasonLeaderboard() {\n        if (user) {\n            const result = await API.graphql(graphqlOperation(fetchSeasonLeaderBoardByPointsQuery));\n            if (result.data.seasonLeaderboardByPoints.items.length > 0) {\n                const rankings = buildRankings(result.data.seasonLeaderboardByPoints.items);\n                setSeasonRankings(rankings);\n                const points = rankings.filter(r => r.player === user.username).map(r => r.points);\n                setSeasonPoints(points.length > 0 ? points : 0);\n            }\n        }\n    }\n\n    async function fetchRoundLeaderboard(roundIndex) {\n        if (user && rounds) {\n            const result = await API.graphql(graphqlOperation(fetchRoundLeaderBoardByPointsQuery, {roundId: rounds[roundIndex].id}));\n            if (result.data.roundLeaderboardByPoints.items.length > 0) {\n                const rankings = buildRankings(result.data.roundLeaderboardByPoints.items);\n                setRoundRankings(rankings);\n                const points = rankings.filter(r => r.player === user.username).map(r => r.points);\n                setRoundPoints(points.length > 0 ? points : 0);\n            } else {\n                setRoundRankings([]);\n                setRoundPoints(0);\n            }\n        }\n    }\n\n    function buildRankings(items) {\n        let pts = -1;\n        return items.map((r, i) => {\n            let isSamePoints = true;\n            if (pts === -1 || pts > r.points) {\n                isSamePoints = false;\n            }\n            pts = r.points;\n\n            return {key: i, position: isSamePoints ? \"-\" : i + 1, player: r.username, points: r.points};\n        });\n    }\n\n    const handlePrevious = () => {\n        setActiveRound((prevActiveRound) => prevActiveRound - 1);\n    };\n\n    const handleNext = () => {\n        setActiveRound((prevActiveRound) => prevActiveRound + 1);\n    };\n\n    const handleChange = (event, newTabValue) => {\n        setTabValue(newTabValue);\n    };\n\n    return (\n        <Authenticator>\n            <Box className={classes.root}>\n                <div style={{marginBottom: theme.spacing(3)}}>\n                    <Typography className={classes.title} variant={\"h2\"} color={\"primary\"}>Leaderboards</Typography>\n                    <Typography className={classes.title} variant={\"h4\"} color={\"primary\"}>Points</Typography>\n                    <StaticScoreField value={tabValue === 1 ? seasonPoints : roundPoints}/>\n                </div>\n                <div className={classes.tab}>\n                    <AppBar position=\"static\" color=\"default\">\n                        <Tabs\n                            value={tabValue}\n                            onChange={handleChange}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"fullWidth\"\n                            aria-label=\"leaderboards tab\"\n                        >\n                            <Tab label=\"Round\" {...a11yProps(0)} />\n                            <Tab label=\"Season\" {...a11yProps(1)} />\n                        </Tabs>\n                    </AppBar>\n                    <TabPanel value={tabValue} index={0} dir={theme.direction}>\n                        {maxRounds > 1 &&\n                        <ProgressStepper onHandleNext={handleNext} onHandlePrevious={handlePrevious} maxSteps={maxRounds} activeStep={activeRound}/>}\n                        {rounds &&\n                        <Typography className={classes.title} variant={\"h4\"} color={\"primary\"}>Round {rounds[activeRound].number}</Typography>}\n                        {roundRankings && user && <PointsTable rows={roundRankings} username={user.username}/>}\n                    </TabPanel>\n                    <TabPanel component={\"div\"} value={tabValue} index={1} dir={theme.direction}>\n                        {user && <PointsTable rows={seasonRankings} username={user.username}/>}\n                    </TabPanel>\n                </div>\n            </Box>\n        </Authenticator>\n    );\n}","/Users/phil/rocSOLID/code/predictor/src/pages/Results.js",["181","182","183","184","185"],"import React, {useEffect, useState} from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\nimport Fixture from \"../components/Fixture\";\nimport ScoreCard from \"../components/ScoreCard\";\nimport API, {graphqlOperation} from \"@aws-amplify/api\";\nimport {predictionsByRound} from \"../graphql/queries\";\nimport Paper from \"@material-ui/core/Paper\";\nimport StaticScoreField from \"../components/StaticScoreField\";\nimport {useUser} from \"../hooks/useUser\";\nimport Link from \"@material-ui/core/Link\";\nimport {onCreateResult, onUpdatePrediction, onUpdateResult} from \"../graphql/subscriptions\";\nimport ProgressStepper from \"../components/ProgressStepper\";\nimport {fetchResultsQuery} from \"../Queries\";\nimport PointsBreakdown from \"../components/PointsBreakdown\";\nimport Authenticator from \"../components/Authenticator\";\n\nexport const PlayRoute = \"/play/\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: 800,\n        margin: \"auto\",\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(5),\n    },\n    title: {\n        fontWeight: \"bolder\",\n        margin: \"auto\",\n        padding: theme.spacing(2),\n        maxWidth: 500,\n    },\n}));\n\nexport default function Results() {\n    const classes = useStyles();\n    const theme = useTheme();\n    const user = useUser();\n\n    const [results, setResults] = useState();\n\n    const [activeRound, setActiveRound] = useState();\n    const [maxRounds, setMaxRounds] = useState();\n\n    const noPrediction = {homeScore: \"-\", awayScore: \"-\", points: \"0\"};\n    const [prediction, setPrediction] = useState(noPrediction);\n\n    const [pointsBreakdown, setPointsBreakdown] = useState();\n\n    useEffect(() => {\n        fetchResults(true);\n    }, []);\n\n    useEffect(() => {\n        if (results) {\n            setActiveRound(results.length - 1);\n            fetchPrediction(results.length - 1);\n        }\n    }, [user]);\n\n    useEffect(() => {\n        if (results && activeRound !== undefined) {\n            fetchPrediction(activeRound);\n        }\n    }, [results, activeRound]);\n\n    useEffect(() => {\n        const updatedListener = assignUpdatedListener();\n        const createdListener = assignCreatedListener();\n\n        return function cleanup() {\n            updatedListener.unsubscribe();\n            createdListener.unsubscribe();\n        };\n    }, [results]);\n\n    useEffect(() => {\n        if (user) {\n            const predictionUpdatedListener = assignPredictionListener();\n\n            return function cleanup() {\n                predictionUpdatedListener.unsubscribe();\n            };\n        }\n    }, [prediction]);\n\n    function assignPredictionListener() {\n        return API.graphql(graphqlOperation(onUpdatePrediction, {owner: user.username})).subscribe({\n            next: (updated) => {\n                const updatedResult = updated.value.data.onUpdatePrediction;\n                if (updatedResult.id === prediction.id) {\n                    setPrediction(updated.value.data.onUpdatePrediction);\n                }\n            }\n        });\n    }\n\n    function assignUpdatedListener() {\n        return API.graphql(graphqlOperation(onUpdateResult)).subscribe({\n            next: (updated) => {\n                const updatedResult = updated.value.data.onUpdateResult;\n                setResults(\n                    results.map(result => {\n                        return result.id === updatedResult.id ? updatedResult : result;\n                    }));\n            }\n        });\n    }\n\n    function assignCreatedListener() {\n        return API.graphql(graphqlOperation(onCreateResult)).subscribe({\n            next: (created) => {\n                fetchResults(false);\n            }\n        });\n    }\n\n    async function fetchResults(resetActiveRound) {\n        const result = await API.graphql(graphqlOperation(fetchResultsQuery));\n\n        if (result.data.listResults.items.length > 0) {\n            setResults(result.data.listResults.items.sort((a, b) => a.round.number - b.round.number));\n            const roundsCount = result.data.listResults.items.length;\n            setMaxRounds(roundsCount);\n            if (resetActiveRound || activeRound === undefined) {\n                setActiveRound(roundsCount - 1);\n            }\n        } else {\n            setMaxRounds(0);\n        }\n    }\n\n    async function fetchPrediction(resultIndex) {\n        const pred = await API.graphql({\n            query: predictionsByRound,\n            variables: {roundId: results[resultIndex].round.id},\n            authMode: 'AMAZON_COGNITO_USER_POOLS'\n        });\n\n        if (pred.data.predictionsByRound.items.length < 1) {\n            setPrediction(noPrediction);\n            setPointsBreakdown(undefined);\n        } else {\n            setPrediction(pred.data.predictionsByRound.items[0]);\n\n            const predictionDiff = pred.data.predictionsByRound.items[0].homeScore - pred.data.predictionsByRound.items[0].awayScore;\n            const resultDiff = results[activeRound].homeScore - results[activeRound].awayScore;\n\n            const score = pred.data.predictionsByRound.items[0].homeScore === results[activeRound].homeScore\n            && pred.data.predictionsByRound.items[0].awayScore === results[activeRound].awayScore ? 5 : 0;\n            const result = ((resultDiff < 0 && predictionDiff < 0) || (resultDiff === 0 && predictionDiff === 0) || (resultDiff > 0 && predictionDiff > 0)) ? 5 : 0;\n\n            const diff = Math.abs(predictionDiff - resultDiff);\n            const diffPoints = Math.floor(Math.max(0, 10 - (diff / 2)));\n\n            setPointsBreakdown({score: score, result: result, difference: diff, diffPoints: diffPoints, total: score + result + diffPoints});\n        }\n    }\n\n    const handlePrevious = () => {\n        setActiveRound((prevActiveRound) => prevActiveRound - 1);\n        setPrediction(noPrediction);\n    };\n\n    const handleNext = () => {\n        setActiveRound((prevActiveRound) => prevActiveRound + 1);\n        setPrediction(noPrediction);\n    };\n\n    return (\n        <Authenticator>\n            <Box className={classes.root}>\n                {maxRounds === 0 && <div>\n                    <Typography className={classes.title} variant={\"h2\"} color={\"primary\"}>Results</Typography>\n                    <Typography className={classes.title} variant={\"h4\"} color={\"primary\"}>Hold fire eager beaver !</Typography>\n                    <Typography className={classes.title} variant={\"body1\"} color={\"primary\"}>We've not even played Round 1 yet! Don't forget to have\n                        a go and <Link href={PlayRoute} color=\"inherit\">enter your predictions</Link> before the game starts otherwise you'll score a\n                        big fat...</Typography>\n                    <StaticScoreField value={0}></StaticScoreField>\n                </div>\n                }\n                {results && activeRound !== undefined && <div style={{marginBottom: theme.spacing(3)}}>\n                    <Typography className={classes.title} variant={\"h2\"} color={\"primary\"}>Round {results[activeRound].round.number}</Typography>\n                    <Typography className={classes.title} variant={\"h4\"} color={\"primary\"}>Points Scored</Typography>\n                    <StaticScoreField id={\"pts\"} value={prediction.points}/>\n                </div>\n                }\n                {maxRounds > 1 && activeRound !== undefined && <ProgressStepper\n                    onHandleNext={handleNext} onHandlePrevious={handlePrevious} maxSteps={maxRounds} activeStep={activeRound}/>}\n                <Paper square elevation={0} className={classes.header}>\n                    {results && activeRound !== undefined &&\n                    <div>\n                        <Fixture round={results[activeRound].round}/>\n                        {results[activeRound].round.status === 'complete' ?\n                            <Typography className={classes.title} variant={\"h4\"} color={\"primary\"}>Result</Typography>\n                            :\n                            <div>\n                                <Typography className={classes.title} variant={\"body1\"} color={\"primary\"}>* Game still in play or confirming final\n                                    score</Typography>\n                                <Typography className={classes.title} variant={\"h4\"} color={\"primary\"}>Current Score</Typography>\n                            </div>\n                        }\n                        <ScoreCard id={\"results\"} homeScore={results[activeRound].homeScore} awayScore={results[activeRound].awayScore}/>\n                        <Typography className={classes.title} variant={\"h4\"} color={\"primary\"}>Prediction</Typography>\n                        <ScoreCard id={\"predictions\"} homeScore={prediction.homeScore} awayScore={prediction.awayScore}/>\n                        {pointsBreakdown && <PointsBreakdown scorePoints={pointsBreakdown.score} resultPoints={pointsBreakdown.result}\n                                                             difference={pointsBreakdown.difference} diffPoints={pointsBreakdown.diffPoints}\n                                                             total={pointsBreakdown.total}/>}\n                    </div>\n                    }\n                </Paper>\n            </Box>\n        </Authenticator>\n    );\n}","/Users/phil/rocSOLID/code/predictor/src/index.js",[],"/Users/phil/rocSOLID/code/predictor/src/pages/HowTo.js",[],"/Users/phil/rocSOLID/code/predictor/src/hooks/useRound.js",["186","187"],"import {useEffect, useState} from 'react';\nimport {API} from \"@aws-amplify/api\";\nimport {onUpdateRound} from \"../graphql/subscriptions\";\nimport {fetchRoundByStatusQuery} from \"../Queries\";\n\nexport function useRound() {\n    const [round, setRound] = useState();\n\n    useEffect(() => {\n        fetchCurrentRound();\n    }, []);\n\n    useEffect(() => {\n        const updatedListener = assignUpdatedListener();\n\n        return function cleanup() {\n            updatedListener.unsubscribe();\n        };\n    }, [round]);\n\n    async function fetchRound(status) {\n        const result = await API.graphql({\n            query: fetchRoundByStatusQuery,\n            variables: {status: status},\n            authMode: 'API_KEY'\n        });\n\n        if (result.data.roundByStatus.items.length > 0) {\n            return result.data.roundByStatus.items[0];\n        }\n    }\n\n    async function fetchCurrentRound() {\n        const activeRound = await fetchRound(\"active\")\n        if (activeRound) {\n            setRound(activeRound);\n        } else {\n            const closedRound = await fetchRound(\"closed\")\n            if (closedRound) {\n                setRound(closedRound);\n            } else {\n                setRound({id: 0});\n            }\n        }\n    }\n\n    function assignUpdatedListener() {\n        return API.graphql({\n            query: onUpdateRound,\n            authMode: 'API_KEY'\n        }).subscribe({\n            next: (updated) => {\n                const updatedRound = updated.value.data.onUpdateRound;\n\n                if (round.id === updatedRound.id) {\n                    if (updatedRound.status === \"complete\") {\n                        setRound({id: 0});\n                    } else {\n                        setRound(updatedRound);\n                    }\n                } else {\n                    if (updatedRound.status === \"active\") {\n                        setRound(updatedRound);\n                    }\n                }\n            }\n        });\n    }\n\n    return round;\n}","/Users/phil/rocSOLID/code/predictor/src/hooks/useUser.js",[],"/Users/phil/rocSOLID/code/predictor/src/pages/Pages.js",[],"/Users/phil/rocSOLID/code/predictor/src/pages/SignIn.js",["188"],"import React, {useEffect} from 'react';\nimport {useHistory} from \"react-router\";\nimport {AuthState, onAuthUIStateChange} from \"@aws-amplify/ui-components\";\nimport Authenticator from \"../components/Authenticator\";\n\nexport default function SignIn() {\n    const history = useHistory();\n    const [authState, setAuthState] = React.useState();\n\n    useEffect(() => {\n        onAuthUIStateChange((nextAuthState, authData) => {\n            setAuthState(nextAuthState);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (authState === AuthState.SignedIn) {\n            history.goBack();\n        }\n    }, [authState]);\n\n    return (\n            <Authenticator/>\n    );\n}","/Users/phil/rocSOLID/code/predictor/src/graphql/mutations.js",[],"/Users/phil/rocSOLID/code/predictor/src/components/StaticScoreField.js",[],"/Users/phil/rocSOLID/code/predictor/src/layout/Footer.js",[],"/Users/phil/rocSOLID/code/predictor/src/components/ProgressStepper.js",[],"/Users/phil/rocSOLID/code/predictor/src/components/PointsTable.js",[],"/Users/phil/rocSOLID/code/predictor/src/graphql/subscriptions.js",[],"/Users/phil/rocSOLID/code/predictor/src/Queries.js",[],"/Users/phil/rocSOLID/code/predictor/src/components/PointsBreakdown.js",[],"/Users/phil/rocSOLID/code/predictor/src/pages/TsAndCs.js",[],"/Users/phil/rocSOLID/code/predictor/src/pages/About.js",[],"/Users/phil/rocSOLID/code/predictor/src/pages/Privacy.js",[],"/Users/phil/rocSOLID/code/predictor/src/components/TitledContent.js",[],"/Users/phil/rocSOLID/code/predictor/src/pages/Score.js",["189","190"],"import React, {useEffect, useState} from 'react';\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\nimport Fixture from \"../components/Fixture\";\nimport ScoreCard from \"../components/ScoreCard\";\nimport {useRound} from \"../hooks/useRound\";\nimport Box from '@material-ui/core/Box';\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport API, {graphqlOperation} from \"@aws-amplify/api\";\nimport {fetchResultByRoundIdQuery} from \"../Queries\";\nimport * as mutations from \"../graphql/mutations\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport {useAdminUser} from \"../hooks/useAdminUser\";\nimport {onUpdateResult} from \"../graphql/subscriptions\";\nimport {ConfirmDialog} from \"../components/ConfirmDialog\";\nimport Authenticator from \"../components/Authenticator\";\nimport Naughty from \"../components/Naughty\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: 800,\n        margin: \"auto\",\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(5),\n    },\n    title: {\n        fontWeight: \"bolder\",\n        margin: \"auto\",\n        padding: theme.spacing(2),\n        maxWidth: 500,\n    },\n    noRound: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: 400,\n    },\n}));\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" direction=\"up\" {...props} />;\n}\n\nexport default function Score() {\n    const classes = useStyles();\n    const theme = useTheme();\n    const round = useRound();\n    const adminUser = useAdminUser();\n\n    const [result, setResult] = useState();\n    const [homeScore, setHomeScore] = useState(0);\n    const [awayScore, setAwayScore] = useState(0);\n\n    const [openSnackBar, setOpenSnackBar] = useState(false);\n\n    const [openConfirm, setOpenConfirm] = useState(false);\n\n    const [roundReady, setRoundReady] = useState();\n\n    useEffect(() => {\n        if (round) {\n            setRoundReady(true);\n        } else {\n            setRoundReady(false);\n        }\n\n        fetchResult();\n    }, [round]);\n\n    useEffect(() => {\n        const updatedListener = assignUpdatedListener();\n\n        return function cleanup() {\n            updatedListener.unsubscribe();\n        };\n    }, [result]);\n\n    function assignUpdatedListener() {\n        return API.graphql(graphqlOperation(onUpdateResult)).subscribe({\n            next: (updated) => {\n                const updatedResult = updated.value.data.onUpdateResult;\n                if (result) {\n                    if (result.id === updatedResult.id) {\n                        setResult(updatedResult);\n                        setHomeScore(updatedResult.homeScore);\n                        setAwayScore(updatedResult.awayScore);\n                    }\n                }\n            }\n        });\n    }\n\n    async function fetchResult() {\n        if (round && round.status === \"closed\") {\n            const res = await API.graphql({\n                query: fetchResultByRoundIdQuery,\n                variables: {roundId: round.id},\n                authMode: 'AMAZON_COGNITO_USER_POOLS'\n            });\n            if (res.data.listResults.items.length < 1) {\n                setResult(undefined);\n                setHomeScore(0);\n                setAwayScore(0);\n            } else {\n                setResult(res.data.listResults.items[0]);\n                setHomeScore(res.data.listResults.items[0].homeScore);\n                setAwayScore(res.data.listResults.items[0].awayScore);\n            }\n        }\n    }\n\n    const handleSubmit = (event) => {\n        saveResult();\n        setOpenSnackBar(true);\n        event.preventDefault();\n    }\n\n    async function saveResult() {\n        if (result) {\n            await API.graphql({\n                query: mutations.updateResult,\n                variables: {input: {id: result.id, roundId: round.id, homeScore: homeScore, awayScore: awayScore}},\n                authMode: 'AMAZON_COGNITO_USER_POOLS'\n            });\n        } else {\n            const res = await API.graphql({\n                query: mutations.createResult,\n                variables: {input: {roundId: round.id, homeScore: homeScore, awayScore: awayScore}},\n                authMode: 'AMAZON_COGNITO_USER_POOLS'\n            });\n            setResult(res.data.createResult);\n        }\n    }\n\n    async function completeRound() {\n        await API.graphql({\n            query: mutations.updateRound,\n            variables: {input: {id: round.id, status: \"complete\"}},\n            authMode: 'AMAZON_COGNITO_USER_POOLS'\n        });\n    }\n\n    const handleHomeScoreChange = (event) => {\n        const value = event.target.value;\n        setHomeScore(!value ? \"0\" : value);\n    };\n\n    const handleAwayScoreChange = (event) => {\n        const value = event.target.value;\n        setAwayScore(!value ? \"0\" : value);\n    };\n\n    const handleSnackBarClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpenSnackBar(false);\n    };\n\n    const handleComplete = (event) => {\n        completeRound();\n    }\n\n    return (\n        <Authenticator>\n            <Box className={classes.root}>\n                {adminUser ?\n                    <div>\n                        {roundReady && <div>\n                            {round.id === 0 || round.status !== \"closed\" ? <div className={classes.noRound}>\n                                    <Typography className={classes.title} variant={\"h2\"} color={\"primary\"}>No rounds in play</Typography>\n                                </div>\n                                : <div>\n                                    {round.status === \"closed\" && <div>\n                                        <Typography className={classes.title} variant={\"h2\"} color={\"primary\"}>Round {round.number}</Typography>\n                                        <Typography style={{textAlign: \"left\", margin: theme.spacing(1)}} gutterBottom variant=\"h5\" color={\"primary\"}>Enter\n                                            the score</Typography>\n                                        <Fixture round={round}/>\n                                        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n                                            <ScoreCard isActive={true} id={\"score\"} homeScore={homeScore} onHomeScoreChange={handleHomeScoreChange}\n                                                       awayScore={awayScore} onAwayScoreChange={handleAwayScoreChange}/>\n                                            <Button style={{marginTop: theme.spacing(5)}} fullWidth={true} variant=\"contained\" type={\"submit\"}\n                                                    color=\"primary\">Save</Button>\n                                            <Snackbar open={openSnackBar} autoHideDuration={3000} onClose={handleSnackBarClose}>\n                                                <Alert onClose={handleSnackBarClose} severity=\"success\">\n                                                    Scores successfully saved!\n                                                </Alert>\n                                            </Snackbar>\n                                            <Button style={{marginTop: theme.spacing(5)}} fullWidth={true} variant=\"contained\"\n                                                    onClick={() => setOpenConfirm(true)} color=\"secondary\">Complete</Button>\n                                            <ConfirmDialog\n                                                title=\"Complete the round?\"\n                                                open={openConfirm}\n                                                setOpen={setOpenConfirm}\n                                                onConfirm={handleComplete}\n                                            >\n                                                <Typography variant={\"body1\"}>Are you sure you want to complete the round?</Typography>\n                                                <Typography variant={\"body2\"}>If these scores are wrong it will be a nightmare to sort\n                                                    out!</Typography>\n                                            </ConfirmDialog>\n                                        </form>\n                                    </div>}\n                                </div>}\n                        </div>}\n                    </div>\n                    :\n                    <Naughty />}\n            </Box>\n        </Authenticator>\n    );\n}","/Users/phil/rocSOLID/code/predictor/src/components/ConfirmDialog.js",[],"/Users/phil/rocSOLID/code/predictor/src/pages/Fixtures.js",["191"],"import React, {useEffect, useState} from 'react';\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\nimport Box from '@material-ui/core/Box';\nimport Typography from \"@material-ui/core/Typography\";\nimport {useAdminUser} from \"../hooks/useAdminUser\";\nimport API, {graphqlOperation} from \"@aws-amplify/api\";\nimport {fetchFixturesQuery, fetchTeamsQuery} from \"../Queries\";\nimport Fixture from \"../components/Fixture\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Card from \"@material-ui/core/Card\";\nimport {onCreateRound, onDeleteRound, onUpdateRound} from \"../graphql/subscriptions\";\nimport {ConfirmDialog} from \"../components/ConfirmDialog\";\nimport {TextField} from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport {DateTimePicker, MuiPickersUtilsProvider,} from '@material-ui/pickers';\nimport Grid from \"@material-ui/core/Grid\";\nimport TeamCard from \"../components/TeamCard\";\nimport ProgressStepper from \"../components/ProgressStepper\";\nimport * as mutations from \"../graphql/mutations\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport Authenticator from \"../components/Authenticator\";\nimport Naughty from \"../components/Naughty\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: 800,\n        margin: \"auto\",\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(5),\n    },\n    title: {\n        fontWeight: \"bolder\",\n        margin: \"auto\",\n        padding: theme.spacing(2),\n        maxWidth: 500,\n    },\n    fixture: {\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(5),\n    },\n    fixtureOptions: {\n        margin: \"auto\",\n        display: 'flex',\n        width: 200,\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    form: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        maxWidth: 500,\n        margin: \"auto\",\n    },\n    formInput: {\n        margin: theme.spacing(2),\n    },\n}));\n\nexport default function Fixtures() {\n    const classes = useStyles();\n    const theme = useTheme();\n    const adminUser = useAdminUser();\n\n    const [fixtures, setFixtures] = useState([]);\n    const [teams, setTeams] = useState([]);\n    const [deleteConfirm, setDeleteConfirm] = useState(false);\n    const [editMode, setEditMode] = useState(false);\n\n    const [roundId, setRoundId] = useState();\n    const [ground, setGround] = useState('');\n    const [kickOff, setKickOff] = useState(new Date());\n    const [homeTeamIdx, setHomeTeamIdx] = useState(0);\n    const [awayTeamIdx, setAwayTeamIdx] = useState(0);\n    const [leighIdx, setLeighIdx] = useState();\n\n    useEffect(() => {\n        fetchFixtures();\n        fetchTeams();\n    }, []);\n\n    useEffect(() => {\n        const updatedListener = assignListener(onUpdateRound);\n        const createdListener = assignListener(onCreateRound);\n        const deletedListener = assignListener(onDeleteRound);\n\n        return function cleanup() {\n            updatedListener.unsubscribe();\n            createdListener.unsubscribe();\n            deletedListener.unsubscribe();\n        };\n    }, [fixtures]);\n\n    async function fetchFixtures() {\n        const rounds = await API.graphql(graphqlOperation(fetchFixturesQuery));\n        setFixtures(rounds.data.roundByStatus.items);\n    }\n\n    async function fetchTeams() {\n        const teams = await API.graphql(graphqlOperation(fetchTeamsQuery));\n        setTeams(teams.data.listTeams.items.sort((a, b) => a.name.localeCompare(b.name)));\n        setLeighIdx(teams.data.listTeams.items.findIndex(t => t.name === \"Leigh Centurions\"));\n    }\n\n    function assignListener(subscription) {\n        return API.graphql(graphqlOperation(subscription)).subscribe({\n            next: (updated) => {\n                fetchFixtures();\n            }\n        });\n    }\n\n    async function saveFixture() {\n        if (roundId) {\n            await API.graphql({\n                query: mutations.updateRound,\n                variables: {\n                    input: {\n                        id: roundId,\n                        ground: ground,\n                        kickOff: kickOff.toISOString(),\n                        roundHomeTeamId: teams[homeTeamIdx].id,\n                        roundAwayTeamId: teams[awayTeamIdx].id\n                    }\n                },\n                authMode: 'AMAZON_COGNITO_USER_POOLS'\n            });\n        } else {\n            await API.graphql({\n                query: mutations.createRound,\n                variables: {\n                    input: {\n                        status: 'pending',\n                        ground: ground,\n                        kickOff: kickOff.toISOString(),\n                        roundHomeTeamId: teams[homeTeamIdx].id,\n                        roundAwayTeamId: teams[awayTeamIdx].id\n                    }\n                },\n                authMode: 'AMAZON_COGNITO_USER_POOLS'\n            });\n        }\n    }\n\n    async function deleteFixture() {\n        if (roundId) {\n            await API.graphql({\n                query: mutations.deleteRound,\n                variables: {input: {id: roundId}},\n                authMode: 'AMAZON_COGNITO_USER_POOLS'\n            });\n        }\n    }\n\n    const handleAdd = () => {\n        wipeFields();\n        setEditMode(true);\n    };\n\n    async function handleEdit(fixture) {\n        setRoundId(fixture.id);\n        setGround(fixture.ground ? fixture.ground : teams.find(t => t.id === fixture.homeTeam.id).ground);\n        setKickOff(new Date(fixture.kickOff));\n        setHomeTeamIdx(teams.findIndex(t => t.id === fixture.homeTeam.id));\n        setAwayTeamIdx(teams.findIndex(t => t.id === fixture.awayTeam.id));\n        setEditMode(true);\n    }\n\n    async function handleDelete(fixture) {\n        setRoundId(fixture.id);\n        setHomeTeamIdx(teams.findIndex(t => t.id === fixture.homeTeam.id));\n        setAwayTeamIdx(teams.findIndex(t => t.id === fixture.awayTeam.id));\n        setDeleteConfirm(true);\n    }\n\n    const wipeFields = () => {\n        setRoundId(undefined);\n        setKickOff(new Date());\n        setHomeTeamIdx(leighIdx);\n        setAwayTeamIdx(leighIdx);\n        setGround(teams[leighIdx].ground);\n    }\n\n    function handleSubmit(event) {\n        saveFixture();\n        setEditMode(false);\n        wipeFields();\n        event.preventDefault();\n    }\n\n    const handleDeleteConfirm = () => {\n        deleteFixture();\n        setRoundId(undefined);\n    }\n\n    const handleCancel = () => {\n        wipeFields();\n        setEditMode(false);\n    }\n\n    const handleHomePrevious = () => {\n        setHomeTeamIdx((idx) => idx - 1);\n        setGround(teams[homeTeamIdx - 1].ground);\n    };\n\n    const handleHomeNext = () => {\n        setHomeTeamIdx((idx) => idx + 1);\n        setGround(teams[homeTeamIdx + 1].ground);\n    };\n\n    const handleAwayPrevious = () => {\n        setAwayTeamIdx((idx) => idx - 1);\n    };\n\n    const handleAwayNext = () => {\n        setAwayTeamIdx((idx) => idx + 1);\n    };\n\n    return (\n        <Authenticator>\n            <Box className={classes.root}>\n                {adminUser ?\n                    editMode ? <div><Typography className={classes.title} variant={\"h2\"} color={\"primary\"}>Change Fixture</Typography>\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n                                    <div className={classes.form}>\n                                        <DateTimePicker\n                                            className={classes.formInput}\n                                            disablePast\n                                            inputVariant=\"outlined\"\n                                            id=\"kickOff\"\n                                            label=\"Kick off\"\n                                            format=\"iii do MMM yyyy HH:mm\"\n                                            value={kickOff}\n                                            onChange={setKickOff}\n                                        />\n                                        <Grid container justify={\"center\"}>\n                                            <Grid item xs={5}>\n                                                <ProgressStepper onHandleNext={handleHomeNext} onHandlePrevious={handleHomePrevious}\n                                                                 maxSteps={teams.length} activeStep={homeTeamIdx}/>\n                                                <TeamCard name={teams[homeTeamIdx].name} badgeSrc={teams[homeTeamIdx].badgeSrc}/>\n                                            </Grid>\n                                            <Grid item xs={2} style={{marginTop: \"100px\"}}>\n                                                <Typography variant=\"h3\" color={\"primary\"}>vs</Typography>\n                                            </Grid>\n                                            <Grid item xs={5}>\n                                                <ProgressStepper onHandleNext={handleAwayNext} onHandlePrevious={handleAwayPrevious}\n                                                                 maxSteps={teams.length} activeStep={awayTeamIdx}/>\n                                                <TeamCard name={teams[awayTeamIdx].name} badgeSrc={teams[awayTeamIdx].badgeSrc}/>\n                                            </Grid>\n                                        </Grid>\n                                        <TextField\n                                            className={classes.formInput}\n                                            id=\"ground\"\n                                            label=\"Ground\"\n                                            variant=\"outlined\"\n                                            value={ground}\n                                            onInput={e => setGround(e.target.value)}\n                                        />\n                                    </div>\n                                    <Button style={{marginTop: theme.spacing(5)}} fullWidth={true} variant=\"contained\" type={\"submit\"}\n                                            color=\"primary\">Save</Button>\n                                    <Button style={{marginTop: theme.spacing(5)}} fullWidth={true} variant=\"contained\" type={\"cancel\"}\n                                            color=\"secondary\" onClick={handleCancel}>Cancel</Button>\n\n                                </form>\n                            </MuiPickersUtilsProvider>\n                        </div>\n                        :\n                        <div>\n                            <Typography className={classes.title} variant={\"h2\"} color={\"primary\"}>Fixtures</Typography>\n                            {fixtures.length > 10 &&\n                            <Fab color=\"primary\" aria-label=\"add\">\n                                <AddIcon onClick={handleAdd}/>\n                            </Fab>}\n                            {fixtures.map((fixture, idx) => {\n                                return <div className={classes.fixture} key={idx}>\n                                    <Card elevation={10}>\n                                        <Fixture round={fixture}/>\n                                        <CardContent className={classes.fixtureOptions}>\n                                            <Fab color=\"primary\" size=\"medium\" aria-label=\"edit\">\n                                                <EditIcon onClick={() => handleEdit(fixture)}/>\n                                            </Fab>\n                                            <div className={classes.grow}></div>\n                                            <Fab color=\"secondary\" size=\"medium\" aria-label=\"delete\">\n                                                <DeleteIcon onClick={() => handleDelete(fixture)}/>\n                                            </Fab>\n                                        </CardContent>\n                                    </Card>\n                                </div>\n                            })}\n                            {fixtures && <Fab color=\"primary\" aria-label=\"add\">\n                                <AddIcon onClick={handleAdd}/>\n                            </Fab>}\n                            <ConfirmDialog\n                                title=\"Delete this fixture?\"\n                                open={deleteConfirm}\n                                setOpen={setDeleteConfirm}\n                                onConfirm={handleDeleteConfirm}\n                            >\n                                {leighIdx && <Typography variant={\"body1\"}>Are you sure you want to\n                                    delete {teams[homeTeamIdx].name} vs {teams[awayTeamIdx].name}?</Typography>}\n                            </ConfirmDialog>\n                        </div>\n                    :\n                    <Naughty />\n                }\n            </Box>\n        </Authenticator>\n    );\n}","/Users/phil/rocSOLID/code/predictor/src/hooks/useAdminUser.js",[],"/Users/phil/rocSOLID/code/predictor/src/components/Authenticator.js",[],"/Users/phil/rocSOLID/code/predictor/src/components/Naughty.js",[],{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"197","line":52,"column":8,"nodeType":"198","endLine":52,"endColumn":14,"suggestions":"199"},{"ruleId":"196","severity":1,"message":"200","line":69,"column":8,"nodeType":"198","endLine":69,"endColumn":21,"suggestions":"201"},{"ruleId":"196","severity":1,"message":"202","line":90,"column":8,"nodeType":"198","endLine":90,"endColumn":14,"suggestions":"203"},{"ruleId":"196","severity":1,"message":"204","line":96,"column":8,"nodeType":"198","endLine":96,"endColumn":16,"suggestions":"205"},{"ruleId":"196","severity":1,"message":"204","line":100,"column":8,"nodeType":"198","endLine":100,"endColumn":21,"suggestions":"206"},{"ruleId":"196","severity":1,"message":"207","line":53,"column":8,"nodeType":"198","endLine":53,"endColumn":10,"suggestions":"208"},{"ruleId":"196","severity":1,"message":"209","line":60,"column":8,"nodeType":"198","endLine":60,"endColumn":14,"suggestions":"210"},{"ruleId":"196","severity":1,"message":"200","line":66,"column":8,"nodeType":"198","endLine":66,"endColumn":30,"suggestions":"211"},{"ruleId":"196","severity":1,"message":"212","line":76,"column":8,"nodeType":"198","endLine":76,"endColumn":17,"suggestions":"213"},{"ruleId":"196","severity":1,"message":"214","line":86,"column":8,"nodeType":"198","endLine":86,"endColumn":20,"suggestions":"215"},{"ruleId":"196","severity":1,"message":"216","line":11,"column":8,"nodeType":"198","endLine":11,"endColumn":10,"suggestions":"217"},{"ruleId":"196","severity":1,"message":"218","line":19,"column":8,"nodeType":"198","endLine":19,"endColumn":15,"suggestions":"219"},{"ruleId":"196","severity":1,"message":"220","line":20,"column":8,"nodeType":"198","endLine":20,"endColumn":19,"suggestions":"221"},{"ruleId":"196","severity":1,"message":"222","line":69,"column":8,"nodeType":"198","endLine":69,"endColumn":15,"suggestions":"223"},{"ruleId":"196","severity":1,"message":"218","line":77,"column":8,"nodeType":"198","endLine":77,"endColumn":16,"suggestions":"224"},{"ruleId":"196","severity":1,"message":"225","line":96,"column":8,"nodeType":"198","endLine":96,"endColumn":18,"suggestions":"226"},"no-native-reassign",["227"],"no-negated-in-lhs",["228"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPreferences'. Either include it or remove the dependency array.","ArrayExpression",["229"],"React Hook useEffect has a missing dependency: 'fetchPrediction'. Either include it or remove the dependency array.",["230"],"React Hook useEffect has missing dependencies: 'fetchCompleteRounds' and 'fetchSeasonLeaderboard'. Either include them or remove the dependency array.",["231"],"React Hook useEffect has a missing dependency: 'fetchRoundLeaderboard'. Either include it or remove the dependency array.",["232"],["233"],"React Hook useEffect has a missing dependency: 'fetchResults'. Either include it or remove the dependency array.",["234"],"React Hook useEffect has missing dependencies: 'fetchPrediction' and 'results'. Either include them or remove the dependency array.",["235"],["236"],"React Hook useEffect has missing dependencies: 'assignCreatedListener' and 'assignUpdatedListener'. Either include them or remove the dependency array.",["237"],"React Hook useEffect has missing dependencies: 'assignPredictionListener' and 'user'. Either include them or remove the dependency array.",["238"],"React Hook useEffect has a missing dependency: 'fetchCurrentRound'. Either include it or remove the dependency array.",["239"],"React Hook useEffect has a missing dependency: 'assignUpdatedListener'. Either include it or remove the dependency array.",["240"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["241"],"React Hook useEffect has a missing dependency: 'fetchResult'. Either include it or remove the dependency array.",["242"],["243"],"React Hook useEffect has a missing dependency: 'assignListener'. Either include it or remove the dependency array.",["244"],"no-global-assign","no-unsafe-negation",{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},"Update the dependencies array to be: [fetchPreferences, user]",{"range":"277","text":"278"},"Update the dependencies array to be: [user, round, fetchPrediction]",{"range":"279","text":"280"},"Update the dependencies array to be: [fetchCompleteRounds, fetchSeasonLeaderboard, user]",{"range":"281","text":"282"},"Update the dependencies array to be: [fetchRoundLeaderboard, rounds]",{"range":"283","text":"284"},"Update the dependencies array to be: [activeRound, fetchRoundLeaderboard]",{"range":"285","text":"286"},"Update the dependencies array to be: [fetchResults]",{"range":"287","text":"288"},"Update the dependencies array to be: [fetchPrediction, results, user]",{"range":"289","text":"290"},"Update the dependencies array to be: [results, activeRound, fetchPrediction]",{"range":"291","text":"292"},"Update the dependencies array to be: [assignCreatedListener, assignUpdatedListener, results]",{"range":"293","text":"294"},"Update the dependencies array to be: [assignPredictionListener, prediction, user]",{"range":"295","text":"296"},"Update the dependencies array to be: [fetchCurrentRound]",{"range":"297","text":"298"},"Update the dependencies array to be: [assignUpdatedListener, round]",{"range":"299","text":"300"},"Update the dependencies array to be: [authState, history]",{"range":"301","text":"302"},"Update the dependencies array to be: [fetchResult, round]",{"range":"303","text":"304"},"Update the dependencies array to be: [assignUpdatedListener, result]",{"range":"305","text":"306"},"Update the dependencies array to be: [assignListener, fixtures]",{"range":"307","text":"308"},[1722,1728],"[fetchPreferences, user]",[2003,2016],"[user, round, fetchPrediction]",[2720,2726],"[fetchCompleteRounds, fetchSeasonLeaderboard, user]",[2845,2853],"[fetchRoundLeaderboard, rounds]",[2929,2942],"[activeRound, fetchRoundLeaderboard]",[1823,1825],"[fetchResults]",[1988,1994],"[fetchPrediction, results, user]",[2131,2153],"[results, activeRound, fetchPrediction]",[2434,2443],"[assignCreatedListener, assignUpdatedListener, results]",[2693,2705],"[assignPredictionListener, prediction, user]",[320,322],"[fetchCurrentRound]",[503,510],"[assignUpdatedListener, round]",[604,615],"[authState, history]",[2145,2152],"[fetchResult, round]",[2333,2341],"[assignUpdatedListener, result]",[3257,3267],"[assignListener, fixtures]"]